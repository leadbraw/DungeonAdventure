@startuml
'https://plantuml.com/class-diagram

' Controller

' Styling settings for a blocky appearance
skinparam linetype ortho
skinparam rectangle {
    BackgroundColor #f8f8f8
    BorderColor #444444
    Shadowing false
}
skinparam ArrowColor #444444
skinparam Class {
    BackgroundColor #ffffff
    ArrowColor #444444
    FontName Arial
    FontSize 12
    BorderThickness 2
    BorderColor #222222
}
left to right direction

' Classes
Class MainController {
    +run() : void
    -fonts
    -screen
    -game_setup
    -state
    -selected_hero
    -debug
    -game_controller
}

Class GameSetup {
    +setup() : tuple
    -item_manager
    -room_manager
    -monster_manager
    -adventurer_manager
    -sprite_manager
}

Class GameController {
    +display_game() : int
    +set_active_adventurer(adventurer_name)
    +player_movement(key)
    +room_interaction()
    +draw_ui(message, in_battle=false) : void
    +get_adventurer_portrait() : Sprite
    +render_room_sprite(sprite_config) : void
    +render_monster_sprite(monster_name) : void
    +display_message(message, delay=0, in_battle=false) : void
    +handle_monster_room(room) : void
    +handle_item_room() : void
    +handle_pillar_room() : int
    +handle_trap_room() : void
    +handle_exit_room() : void
    +handle_regular_item(item) : void
    +handle_pillar_item(item) : void
    +end_message() : int
    +set_up_from_load(the_screen, the_fonts) : void
    +__getstate__() : dict
    +__setstate__(state) : void
    -screen
    -hero_name
    -fonts
    -room_manager
    -sprite_manager
    -battle_manager
    -dungeon_manager
    -adventurer_manager
    -minimap
    -full_maps
    -current_floor
    -position
    -active_adventurer
    -current_message
    -pillar_status : dict
    -return_to_menu : bool
    -inventory_button : Button
    -save_button : Button
}

Class DungeonManager {
    +get_instance() : DungeonManager
    +initialize_dungeon() : List<Dungeon>
    +populate_rooms(floor, monster_rooms, elite_rooms, item_rooms, all_rooms) : void
    +place_monster(floor, room_coords, monster_type) : void
    +place_item(floor, room_coords) : void
    +place_pillar(floor_index, pillar_coords) : void
    +get_floor_map(floor, reveal_all=false) : Map
    +get_monster_in_room(floor, position) : Monster
    +get_item_in_room(floor, position) : Item
    +clear_item_in_room(floor, position) : void
    +get_floor_entrance(floor) : tuple
    +mark_room_visited(floor, position) : void
    +get_room(floor, position) : Room
    +__getstate__() : dict
    +__setstate__(state) : void
    -dungeon : List<DungeonFloor>
    -monster_manager : MonsterManager
    -item_manager : ItemManager
}

Class BattleManager {
    +get_instance(screen, fonts, draw_ui) : BattleManager
    +reset(screen, fonts, draw_ui) : void
    +start_battle(adventurer, monster, dungeon, current_floor, position, get_adventurer_portrait, minimap, inventory_overlay) : int
    +draw_battle_ui(monster, adventurer, fight_button, item_button, special_button, get_adventurer_portrait, minimap) : void
    +handle_battle_event(monster, adventurer, inventory_overlay, dungeon, current_floor, position, fight_button, item_button, special_button) : bool
    +post_battle_logic(monster, adventurer, dungeon, current_floor, position) : int
    +execute_fight(monster, adventurer) : void
    +execute_special(monster, adventurer) : void
    -screen
    -fonts
    -draw_ui
    -inventory_overlay
}

Class DatabaseInitializer {
    +database_exists() : bool
    +initialize_database() : void
    +create_tables() : void
    +reset_database() : void
    -db_path : string
}

Class DatabaseManager
Class RoomManager
Class SpriteManager
Class InventoryOverlay
Class AdventurerManager
Class MonsterManager
Class ItemManager
Class Button
Class MonsterFactory
Class ItemFactory
Class Dungeon
Class DungeonFloor

' Relationships
MainController o-- GameSetup
MainController o-- GameController
MainController ..> SpriteManager
MainController ..> GameStateManager
MainController ..> SplashScreen
MainController ..> MainScreen
MainController ..> CharacterScreen
MainController ..> AdventurerManager

GameSetup ..> DatabaseInitializer
GameSetup ..> DatabaseManager
GameSetup o-- ItemManager
GameSetup o-- RoomManager
GameSetup o-- MonsterManager
GameSetup o-- AdventurerManager
GameSetup o-- SpriteManager

GameController o-- RoomManager
GameController o-- BattleManager
GameController o-- DungeonManager
GameController ..> InventoryOverlay
GameController ..> Button

DungeonManager o-- DungeonFloor
DungeonManager o-- MonsterManager
DungeonManager o-- ItemManager
DungeonManager ..> MonsterFactory
DungeonManager ..> ItemFactory

BattleManager ..> InventoryOverlay
BattleManager ..> Button

DatabaseInitializer ..> DatabaseManager

@enduml